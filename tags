!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/shreesh/.config/nvim/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/a1b35a9c/
$FZF_DEFAULT_COMMAND	fzf.vim	/^let $FZF_DEFAULT_COMMAND="rg --files --hidden"$/;"	v
$FZF_DEFAULT_OPTS	fzf.vim	/^let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline'$/;"	v
,<space>	init.vim	/^nnoremap <silent> ,<space> :nohlsearch<CR>$/;"	m
0	coc-settings.json	/^    "javascript",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
0	coc-settings.json	/^    "vue": ["javascript", "typescript"]$/;"	s	array:snippets.extends.vue
0	coc-settings.json	/^  "eslint.probe": ["javascript", "typescript", "vue"],$/;"	s	array:eslint.probe
1	coc-settings.json	/^    "typescript",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
1	coc-settings.json	/^    "vue": ["javascript", "typescript"]$/;"	s	array:snippets.extends.vue
1	coc-settings.json	/^  "eslint.probe": ["javascript", "typescript", "vue"],$/;"	s	array:eslint.probe
10	coc-settings.json	/^    "pug"$/;"	s	array:coc.preferences.formatOnSaveFiletypes
2	coc-settings.json	/^    "typescriptreact",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
2	coc-settings.json	/^  "eslint.probe": ["javascript", "typescript", "vue"],$/;"	s	array:eslint.probe
3	coc-settings.json	/^    "json",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
4	coc-settings.json	/^    "javascriptreact",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
5	coc-settings.json	/^    "typescript.tsx",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
6	coc-settings.json	/^    "graphql",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
7	coc-settings.json	/^    "css",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
8	coc-settings.json	/^    "html",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
9	coc-settings.json	/^    "vue",$/;"	s	array:coc.preferences.formatOnSaveFiletypes
<C-_>	init.vim	/^map <C-_> :Commentary<CR>$/;"	m
<C-d>	coc-config.vim	/^nmap <silent> <C-d> <Plug>(coc-range-select)$/;"	m
<C-d>	coc-config.vim	/^xmap <silent> <C-d> <Plug>(coc-range-select)$/;"	m
<C-f>	fzf.vim	/^map <C-f> :Files<CR>$/;"	m
<C-n>	nerdtree.vim	/^nmap <C-n> :NERDTreeToggle<CR>$/;"	m
<F2>	coc-config.vim	/^nmap <F2> <Plug>(coc-rename)$/;"	m
<S-TAB>	coc-config.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
<TAB>	coc-config.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<c-space>	coc-config.vim	/^inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
<cr>	coc-config.vim	/^inoremap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<leader>a	coc-config.vim	/^nmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>a	coc-config.vim	/^xmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>ac	coc-config.vim	/^nmap <leader>ac  <Plug>(coc-codeaction)$/;"	m
<leader>b	fzf.vim	/^map <leader>b :Buffers<CR>$/;"	m
<leader>f	coc-config.vim	/^nmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>f	coc-config.vim	/^xmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>g	fzf.vim	/^nnoremap <leader>g :Rg<CR>$/;"	m
<leader>m	fzf.vim	/^nnoremap <leader>m :Marks<CR>$/;"	m
<leader>qf	coc-config.vim	/^nmap <leader>qf  <Plug>(coc-fix-current)$/;"	m
<leader>t	fzf.vim	/^nnoremap <leader>t :Tags<CR>$/;"	m
<space>a	coc-config.vim	/^nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>$/;"	m
<space>c	coc-config.vim	/^nnoremap <silent> <space>c  :<C-u>CocList commands<cr>$/;"	m
<space>e	coc-config.vim	/^nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>$/;"	m
<space>j	coc-config.vim	/^nnoremap <silent> <space>j  :<C-u>CocNext<CR>$/;"	m
<space>k	coc-config.vim	/^nnoremap <silent> <space>k  :<C-u>CocPrev<CR>$/;"	m
<space>o	coc-config.vim	/^nnoremap <silent> <space>o  :<C-u>CocList outline<cr>$/;"	m
<space>p	coc-config.vim	/^nnoremap <silent> <space>p  :<C-u>CocListResume<CR>$/;"	m
<space>s	coc-config.vim	/^nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>$/;"	m
Files	fzf.vim	/^command! -bang -nargs=? -complete=dir Files$/;"	c
Fold	coc-config.vim	/^command! -nargs=? Fold :call     CocAction('fold', <f-args>)$/;"	c
Format	coc-config.vim	/^command! -nargs=0 Format :call CocAction('format')$/;"	c
GGrep	fzf.vim	/^command! -bang -nargs=* GGrep$/;"	c
K	coc-config.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
OR	coc-config.vim	/^command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')$/;"	c
Prettier	other-config.vim	/^command! -nargs=0 Prettier :CocCommand prettier.formatFile$/;"	c
RG	fzf.vim	/^command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)$/;"	c
Rg	fzf.vim	/^command! -bang -nargs=* Rg$/;"	c
RipgrepFzf	fzf.vim	/^function! RipgrepFzf(query, fullscreen)$/;"	f
[g	coc-config.vim	/^nmap <silent> [g <Plug>(coc-diagnostic-prev)$/;"	m
]g	coc-config.vim	/^nmap <silent> ]g <Plug>(coc-diagnostic-next)$/;"	m
af	coc-config.vim	/^omap af <Plug>(coc-funcobj-a)$/;"	m
af	coc-config.vim	/^xmap af <Plug>(coc-funcobj-a)$/;"	m
coc.preferences.formatOnSaveFiletypes	coc-settings.json	/^  "coc.preferences.formatOnSaveFiletypes": [$/;"	a
eslint.autoFixOnSave	coc-settings.json	/^  "eslint.autoFixOnSave": true,$/;"	b
eslint.probe	coc-settings.json	/^  "eslint.probe": ["javascript", "typescript", "vue"],$/;"	a
eslint.run	coc-settings.json	/^  "eslint.run": "onSave",$/;"	s
format	lua/vgit-config.lua	/^        format = function(blame, git_config)$/;"	f
g:NERDTreeGitStatusWithFlags	nerdtree.vim	/^let g:NERDTreeGitStatusWithFlags = 1$/;"	v
g:NERDTreeIgnore	nerdtree.vim	/^let g:NERDTreeIgnore = ['^node_modules$']$/;"	v
g:coc_global_extensions	coc-config.vim	/^let g:coc_global_extensions = [$/;"	v
g:ctrlp_custom_ignore	other-config.vim	/^let g:ctrlp_custom_ignore = 'node_modules$'$/;"	v
g:ctrlp_user_command	other-config.vim	/^let g:ctrlp_user_command = ['.git\/', 'git --git-dir=%s\/.git ls-files -oc --exclude-standard']$/;"	v
g:fzf_action	fzf.vim	/^let g:fzf_action = {$/;"	v
g:fzf_colors	fzf.vim	/^let g:fzf_colors =$/;"	v
g:fzf_history_dir	fzf.vim	/^let g:fzf_history_dir = '~\/.local\/share\/fzf-history'$/;"	v
g:fzf_layout	fzf.vim	/^let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset'/;"	v
g:fzf_tags_command	fzf.vim	/^let g:fzf_tags_command = 'ctags -R'$/;"	v
g:prettier#autoformat	other-config.vim	/^let g:prettier#autoformat = 0$/;"	v
gd	coc-config.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gi	coc-config.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gr	coc-config.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gy	coc-config.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
if	coc-config.vim	/^omap if <Plug>(coc-funcobj-i)$/;"	m
if	coc-config.vim	/^xmap if <Plug>(coc-funcobj-i)$/;"	m
j	other-config.vim	/^noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')$/;"	m
jk	nerdtree.vim	/^inoremap jk <ESC>$/;"	m
k	other-config.vim	/^noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')$/;"	m
mygroup	coc-config.vim	/^augroup mygroup$/;"	a
s:check_back_space	coc-config.vim	/^function! s:check_back_space() abort$/;"	f
s:show_documentation	coc-config.vim	/^function! s:show_documentation()$/;"	f
snippets.extends	coc-settings.json	/^  "snippets.extends": {$/;"	o
suggest.noselect	coc-settings.json	/^  "suggest.noselect": false,$/;"	b
tsserver.enable	coc-settings.json	/^  "tsserver.enable": false,$/;"	b
vue	coc-settings.json	/^    "vue": ["javascript", "typescript"]$/;"	a	object:snippets.extends
